from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                           InlineKeyboardMarkup, InlineKeyboardButton)

from app.database.models import async_session, Apartment
from sqlalchemy.future import select

start = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É üè†", callback_data="rent")],
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É üíµ", callback_data="buy")],
        [InlineKeyboardButton(text="–ó–¥–∞—Ç–∏/–ü—Ä–æ–¥–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É üí∏", callback_data="submit")],
    ], input_field_placeholder="–ó—Ä–æ–∑—É–º—ñ–≤ —Ç–µ–±–µ"
)  

main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É")], 
        [KeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è / –î–æ–ø–æ–º–æ–≥–∞")],
        [KeyboardButton(text="–ó–±–µ—Ä–µ–∂–µ–Ω—ñ")]
    ],
    resize_keyboard=True
)

async def get_rooms_keyboard(selected_rooms=None):
    if selected_rooms is None:
        selected_rooms = set()
    
    async with async_session() as session:
        stmt = select(Apartment.number_of_rooms).distinct()
        result = await session.execute(stmt)
        room_numbers = result.scalars().all()
    
    buttons = []
    for room in room_numbers:
        text = f"{room}"
        if str(room) in selected_rooms:
            text += " ‚úÖ"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"room_{room}")])
    
    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="rooms_done")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    return keyboard


async def get_regions_keyboard(selected_regions=None):
    if selected_regions is None:
        selected_regions = set()
    
    async with async_session() as session:
        stmt = select(Apartment.region).distinct()
        result = await session.execute(stmt)
        regions = result.scalars().all()

    keyboard = []

    for i in range(0, len(regions), 2):
        buttons = [
            InlineKeyboardButton(
                text=f"{region} {'‚úÖ' if region in selected_regions else ''}",
                callback_data=f"region_{region}"
            ) for region in regions[i:i + 2]
        ]
        keyboard.append(buttons)
    
    select_all_button = InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏ –≤—Å–µ", callback_data="select_all_regions")
    deselect_all_button = InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏ –Ω—ñ—á–æ–≥–æ", callback_data="deselect_all_regions")
    next_button = InlineKeyboardButton(text="–î–∞–ª—ñ", callback_data="regions_done")
    
    keyboard.append([select_all_button, deselect_all_button])
    keyboard.append([next_button])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_prev_next_keyboard(saved=True):
    keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev"),
                    InlineKeyboardButton(text="–ó–±–µ—Ä–µ–∂–µ–Ω–æ üåü" if saved else "–ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="saved" if saved else "save"),
                    InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next")
                ]
            ]
        )
    return keyboard

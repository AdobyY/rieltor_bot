from typing import Union
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext

import pandas as pd

import os

import app.keyboards as kb
import app.database.requests as rq
from app.database.models import async_session, Apartment, SavedApartment, User
from app.states import RentFlow
from app.notify_managers import notify_managers
from app.constants import *

from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession

from data import get_data

router = Router()


@router.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    
    if user_id in MANAGERS:
        msg = await message.answer(
            f"""–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! 
–Ø —Ç–µ–±–µ –∑–Ω–∞—é, —Ç–∏ —î –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –æ—Ç–∂–µ —É —Ç–µ–±–µ —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∞–≤–∞!
–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ–≤—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∏ –∫–≤–∞—Ä—Ç–∏—Ä.
            
<b>–û—Å—å –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ —Ç–æ–±—ñ –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è:</b>

/update_data - —â–æ–± —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –µ–∫—Å–µ–ª—å –ª–∏—Å—Ç–æ–º, —è–∫—â–æ —Ç–∏ –≤–Ω—ñ—Å —Ç—É–¥–∏ –∑–º—ñ–Ω–∏

/get_data - —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            

–Ø–∫ –≤–∏–Ω–∏–∫–Ω—É—Ç—å —è–∫—ñ—Å—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞: {DEVELOPER}""", parse_mode="HTML"
        )
        # –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await msg.pin()
    else:
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç, –¥–∞–≤–∞–π —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤–∏–±—Ä–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –º—Ä—ñ—ó!\n–í–∏–±–µ—Ä–∏ —Ç–µ, —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ!",
            reply_markup=kb.start  # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        )

@router.message(Command("change_settings"))
@router.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É üîÑ")
async def change(message: Message):
    user = message.from_user
    await rq.set_user(user.id, user.first_name, user.last_name, user.username)
    await message.answer(f'–ì–∞—Ä–∞–∑–¥, –¥–∞–≤–∞–π —â–æ—Å—å –∑–º—ñ–Ω–∏–º–æ.\n–û—Ç–∂–µ, {user.first_name or user.username}, —Ç–∏ —Ö–æ—á–µ—à...', reply_markup=kb.start)


# –û—Ä–µ–Ω–¥—É—î–º–æ —ñ –∫—É–ø—É—î–º–æ –∫–≤–∞—Ä—Ç–∏—Ä—É, –ø–æ–∫–∏ –¥–≤—ñ –∫–Ω–æ–ø–∫–∏ –≤–∏–∫–æ–Ω—É—é—Ç—å –æ–¥–Ω–µ —ñ —Ç–µ–∂
@router.callback_query(F.data == "rent")
@router.callback_query(F.data == "buy")
async def rent(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RentFlow.number_of_rooms)
    await callback.message.answer("–°–∫—ñ–ª—å–∫–∏ –∫—ñ–º–Ω–∞—Ç —É –∫–≤–∞—Ä—Ç–∏—Ä—ñ?", reply_markup=await kb.get_rooms_keyboard())
    await callback.answer()


# –ó–¥–∞—î–º–æ –∫–≤–∞—Ä—Ç–∏—Ä—É
@router.callback_query(F.data == "sell")
async def sell(callback: CallbackQuery):
    await callback.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É \nmanager.username \n–¢–∞–º –≤–∏ –∑–º–æ–∂–µ—Ç–µ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ —Å–≤–æ—é –∫–≤–∞—Ä—Ç–∏—Ä—É —É –Ω–∞—à–æ–º—É –±–æ—Ç—ñ!", reply_markup=kb.back)
    await callback.answer()


@router.callback_query(F.data == "back")
async def cmd_start(callback: CallbackQuery):
    user = callback.from_user 
    username = user.first_name or user.username 

    await callback.message.answer(f'–û—Ç–∂–µ, {username}, —Ç–∏ —Ö–æ—á–µ—à...', reply_markup=kb.start)
    await callback.answer()


@router.callback_query(F.data.startswith("room_"))
async def select_room(callback: CallbackQuery, state: FSMContext):
    room_number = callback.data.split("_")[1]
    data = await state.get_data()
    selected_rooms = data.get("selected_rooms", set())
    
    if room_number in selected_rooms:
        selected_rooms.remove(room_number)
    else:
        selected_rooms.add(room_number)
    
    await state.update_data(selected_rooms=selected_rooms)
    await callback.message.edit_reply_markup(reply_markup=await kb.get_rooms_keyboard(selected_rooms))
    await callback.answer()


@router.callback_query(F.data == "rooms_done")
async def rooms_done(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RentFlow.region)
    await callback.message.answer("–í —è–∫–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ –≤–∏ —à—É–∫–∞—î—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É?", reply_markup=await kb.get_regions_keyboard())
    await callback.answer()


@router.callback_query(F.data.startswith("region_"))
async def select_region(callback: CallbackQuery, state: FSMContext):
    region = callback.data.split("_")[1]
    data = await state.get_data()
    selected_regions = data.get("selected_regions", set())
    
    if region in selected_regions:
        selected_regions.remove(region)
    else:
        selected_regions.add(region)
    
    await state.update_data(selected_regions=selected_regions)
    await callback.message.edit_reply_markup(reply_markup=await kb.get_regions_keyboard(selected_regions))
    await callback.answer()


@router.callback_query(F.data == "select_all_regions")
async def select_all_regions(callback: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        stmt = select(Apartment.region).distinct()
        result = await session.execute(stmt)
        regions = result.scalars().all()
        
    all_regions = set(regions)
    current_data = await state.get_data()
    selected_regions = current_data.get('selected_regions', set())
    
    if selected_regions != all_regions:
        await state.update_data(selected_regions=all_regions)
        new_markup = await kb.get_regions_keyboard(all_regions)
        await callback.message.edit_reply_markup(reply_markup=new_markup)
        
    await callback.answer()


@router.callback_query(F.data == "deselect_all_regions")
async def deselect_all_regions(callback: CallbackQuery, state: FSMContext):
    current_data = await state.get_data()
    selected_regions = current_data.get('selected_regions', set())

    if selected_regions:
        await state.update_data(selected_regions=set())
        new_markup = await kb.get_regions_keyboard(set())
        await callback.message.edit_reply_markup(reply_markup=new_markup)
    await callback.answer()



@router.callback_query(F.data == "regions_done")
async def regions_done(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RentFlow.price)
    await callback.message.answer("–Ø–∫—É —Å—É–º—É –≤–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏? –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1000-2000")
    await callback.answer()


@router.message(RentFlow.price)
async def rent_price(message: Message, state: FSMContext):
    price_range = message.text
    try:
        min_price, max_price = map(int, price_range.split("-"))
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é —Ü—ñ–Ω–æ—é
        await state.update_data(min_price=min_price, max_price=max_price)
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '1000-2000'.")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É
    await state.set_state(RentFlow.results)
    await message.answer("–í–∏–∫–æ–Ω–∞–Ω–æ –ø–æ—à—É–∫ –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏. –û—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    await search_results(message, state)  # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

@router.callback_query(F.data == "prev")
async def prev_apartment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    apartments = data.get("apartments", [])
    current_index = data.get("current_index", 0)

    if current_index > 0:
        new_index = current_index - 1
        await state.update_data(current_index=new_index)
        await send_apartment_message(callback, apartments, new_index)
    await callback.answer()

@router.callback_query(F.data == "next")
async def next_apartment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    apartments = data.get("apartments", [])
    current_index = data.get("current_index", 0)

    if current_index < len(apartments) - 1:
        new_index = current_index + 1
        await state.update_data(current_index=new_index)
        await send_apartment_message(callback, apartments, new_index)
    await callback.answer()

@router.callback_query(F.data.in_({"save", "saved"}))
async def handle_apartment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    apartments = data.get("apartments", [])
    current_index = data.get("current_index", 0)
    apartment = apartments[current_index]
    action = callback.data  # "save" –∞–±–æ "saved"
    
    async with async_session() as session:
        async with session.begin():
            user_id = callback.from_user.id
            stmt = select(SavedApartment).where(
                SavedApartment.user_id == user_id,
                SavedApartment.apartment_id == apartment.id
            )
            result = await session.execute(stmt)
            saved_apartment = result.scalars().first()

            if action == "save":
                new_saved_apartment = SavedApartment(
                    user_id=user_id,
                    apartment_id=apartment.id
                )
                session.add(new_saved_apartment)
                await session.commit()

                await send_apartment_message(callback, apartments, current_index)  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await callback.answer(text='–ó–±–µ—Ä–µ–∂–µ–Ω–æ')

            elif action == "saved":
                await session.delete(saved_apartment)
                await session.commit()

                await send_apartment_message(callback, apartments, current_index)  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await callback.answer(text='–í–∏–ª—É—á–µ–Ω–æ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö')


@router.message(F.text == "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ üåü")
@router.message(Command("show_saved"))
async def view_saved_apartments(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        stmt = select(Apartment).join(SavedApartment).where(SavedApartment.user_id == user_id)
        result = await session.execute(stmt)
        saved_apartments = result.scalars().all()

    if not saved_apartments:
        await message.answer("–í–∏ —â–µ –Ω–µ –∑–±–µ—Ä–µ–≥–ª–∏ –∂–æ–¥–Ω–æ—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏.\n\n‚ÄºÔ∏è–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ‚ÄºÔ∏è")
        return

    await message.answer("<b>–û—Å—å –≤–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:</b>", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    await state.update_data(apartments=saved_apartments, current_index=0)
    await send_apartment_message(message, saved_apartments, 0)


async def search_results(message: Message, state: FSMContext):
    data = await state.get_data()
    selected_rooms = data.get("selected_rooms", set())
    selected_regions = data.get("selected_regions", set())
    min_price = data.get("min_price", 0)
    max_price = data.get("max_price", float('inf'))

    async with async_session() as session:
        stmt = select(Apartment).where(
            Apartment.number_of_rooms.in_(selected_rooms),
            Apartment.region.in_(selected_regions),
            Apartment.price.between(min_price, max_price)
        )
        result = await session.execute(stmt)
        apartments = result.scalars().all()

    if not apartments:
        await message.answer("–ù–∞ –∂–∞–ª—å, —É –Ω–∞—Å –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î –¥–ª—è —Ç–µ–±–µ. –ú–æ–∂–ª–∏–≤–æ, —Å–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ. \n –¢–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –∑–Ω–∏–∑—É ‚¨áÔ∏è",
                             reply_markup=kb.main)
        await state.clear()
        return

    await state.update_data(apartments=apartments, current_index=0)

    await send_apartment_message(message, apartments, 0)


async def send_apartment_message(entity: Union[Message, CallbackQuery], apartments: list, index: int):
    apartment = apartments[index]
    total_count = len(apartments)
    result_text = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b> {index + 1}/{total_count}\n\n"
        f"üìç–ê–¥—Ä–µ—Å–∞: {apartment.address}\n"
        f"üíµ–¶—ñ–Ω–∞: {apartment.price}$\n"
        f"üåÑ–†–µ–≥—ñ–æ–Ω: {apartment.region}\n"
        f"üèò–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç: {apartment.number_of_rooms}\n"
        f"üî∫–ü–æ–≤–µ—Ä—Ö: {apartment.floor}\n"
        f"„ÄΩÔ∏è–ú–µ—Ç—Ä–æ: {apartment.metro}\n"
        f"{'' if apartment.additional_info is None else f'‚ùï{apartment.additional_info}'}\n"
        f'‚ö°Ô∏è<a href="{apartment.article}">–°—Ç–∞—Ç—Ç—è</a>\n'
    )

    user_id = entity.from_user.id if isinstance(entity, Message) else entity.message.chat.id
    async with async_session() as session:
        stmt = select(SavedApartment).where(
            SavedApartment.user_id == user_id,
            SavedApartment.apartment_id == apartment.id
        )
        result = await session.execute(stmt)
        is_saved = result.scalars().first() is not None

    if isinstance(entity, Message):
        try:
            await entity.edit_text(result_text, reply_markup=await kb.get_prev_next_keyboard(saved=is_saved, apartment_id=apartment.id), parse_mode="HTML")
        except TelegramBadRequest:
            await entity.answer(result_text, reply_markup=await kb.get_prev_next_keyboard(saved=is_saved, apartment_id=apartment.id), parse_mode="HTML")
    elif isinstance(entity, CallbackQuery):
        try:
            await entity.message.edit_text(result_text, reply_markup=await kb.get_prev_next_keyboard(saved=is_saved, apartment_id=apartment.id), parse_mode="HTML")
        except TelegramBadRequest:
            await entity.message.answer(result_text, reply_markup=await kb.get_prev_next_keyboard(saved=is_saved, apartment_id=apartment.id), parse_mode="HTML")


@router.callback_query(F.data.startswith("schedule_viewing"))
async def schedule_viewing(callback: CallbackQuery, state: FSMContext):
    # Extract apartment ID from the callback data
    apartment_id = callback.data.split('_')[2]  # Assuming the ID is the last part after the last '_'
    print(apartment_id)
    # Convert apartment_id to integer if necessary
    try:
        apartment_id = int(apartment_id)
    except ValueError:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–≤–∞—Ä—Ç–∏—Ä–∏.")
        return
    
    # Save the apartment ID in the state
    await state.update_data(apartment_id=apartment_id)
    
    # Set the state to wait for confirmation
    await state.set_state("waiting_for_confirmation")
    
    # Send confirmation message
    await callback.message.answer(
        "–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —Ü—ñ—î—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏?\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:",
        reply_markup=kb.confirmation 
    )
    await callback.answer()



@router.callback_query(F.data == "confirm_viewing")
async def confirm_viewing(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    apartment_id = data.get('apartment_id')

    # # –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    # keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    # button = KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    # keyboard.add(button)

    await callback.message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
        reply_markup=kb.rq_contact
    )
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è apartment_id –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(apartment_id=apartment_id)
    await state.set_state(RentFlow.phone_number)  # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    
    await callback.answer()

@router.message(RentFlow.phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    contact = message.contact
    phone_number = contact.phone_number
    data = await state.get_data()
    apartment_id = data.get('apartment_id')

    await notify_managers(apartment_id, message, phone_number)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É    
    await message.answer("–î—è–∫—É—î–º–æ! \n–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏!", reply_markup=kb.main)

    
    await state.clear()

@router.callback_query(F.data == "cancel_viewing")
async def cancel_viewing(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ó–∞–ø–∏—Å –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=kb.main)
    await state.clear()
    await callback.answer()


@router.message(F.text == "–î–æ–ø–æ–º–æ–≥–∞ üÜò")
@router.message(Command("help"))
async def cmd_start(message: Message):
    await message.answer(f'–Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è, –ø–∏—à–∏ –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É {MANAGER_USERNAME}!', reply_markup=kb.main)

@router.message(F.text == "–æ–Ω–æ–≤–∏—Ç–∏")
@router.message(Command("update_data"))
async def update_data(message: Message):
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if user_id not in MANAGERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ(")
        return
    
    data = get_data()
    await rq.set_apartments(data)
    await message.answer("‚ÄºÔ∏è –ì–æ—Ç–æ–≤–æ! –î–∞–Ω—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ ‚ÄºÔ∏è")


@router.message(Command("get_data"))
async def get_user_data(message: Message):
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if user_id not in MANAGERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü–∏—Ö –¥–∞–Ω–∏—Ö(")
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫—Å–µ–ª—å —Ñ–∞–π–ª—É
    excel_file_path = os.path.join(os.getcwd(), "database_data.xlsx")
    async with async_session() as session:
        with pd.ExcelWriter(excel_file_path, engine='xlsxwriter') as writer:
            await save_table_to_excel(session, writer, Apartment, "Apartments")
            await save_table_to_excel(session, writer, User, "Users")
            await save_table_to_excel(session, writer, SavedApartment, "SavedApartments")
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –µ–∫—Å–µ–ª—å —Ñ–∞–π–ª–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    try:
        # Send the file directly using the file path
        await message.answer_document(
            document=FSInputFile(path="database_data.xlsx"),
            caption="–û—Å—å —Ç–µ–ø–µ—Ä—ñ—à–Ω—è –±–∞–∑–∞"
            )
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}")


async def save_table_to_excel(session: AsyncSession, writer: pd.ExcelWriter, model, sheet_name: str):
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ –≤–∫–∞–∑–∞–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö –≤ –µ–∫—Å–µ–ª—å —Ñ–∞–π–ª."""
    stmt = select(model)
    result = await session.execute(stmt)
    df = pd.DataFrame([row.__dict__ for row in result.scalars().all()])
    df.to_excel(writer, sheet_name=sheet_name, index=False)

    